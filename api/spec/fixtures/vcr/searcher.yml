---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?cx=5dc8fc8d844008985&key=AIzaSyBcok7Z74CGQDgezKDVt6JPAZGHuWDMXEQ&q=hello%20world&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 21 Nov 2020 07:54:45 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-T051=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 21 Nov 2020 07:54:45 GMT
- request:
    method: get
    uri: https://api.bing.microsoft.com/v7.0/search?offset=0&q=hello%20world
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Ocp-Apim-Subscription-Key:
      - 74684aa71f3d4ba6b411731d26468f02
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private, max-age=0
      Transfer-Encoding:
      - chunked
      Content-Type:
      - application/json; charset=utf-8
      Expires:
      - Sat, 21 Nov 2020 07:53:46 GMT
      Vary:
      - Accept-Encoding
      P3p:
      - CP="NON UNI COM NAV STA LOC CURa DEVa PSAa PSDa OUR IND"
      Bingapis-Traceid:
      - 8F1D7BE6447747B5AC6227EABE200806
      Bingapis-Sessionid:
      - 75E7CCF0E9404C2BBF60EC4292228E2F
      X-Msedge-Clientid:
      - 0B7B1B1574E06A1C1DDB149C753E6BA2
      X-Msapi-Userstate:
      - '7396'
      Bingapis-Market:
      - es-XL
      X-Search-Responseinfo:
      - InternalResponseTime=278,MSDatacenter=BN2B
      X-Msedge-Ref:
      - 'Ref A: 8F1D7BE6447747B5AC6227EABE200806 Ref B: BLUEDGE0611 Ref C: 2020-11-21T07:54:46Z'
      Apim-Request-Id:
      - 46e3abae-b27e-4203-afc0-5d1c603c4cf6
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Csp-Billing-Usage:
      - CognitiveServices.BingSearchV7.Transaction=1
      Date:
      - Sat, 21 Nov 2020 07:54:46 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 21 Nov 2020 07:54:47 GMT
recorded_with: VCR 6.0.0
